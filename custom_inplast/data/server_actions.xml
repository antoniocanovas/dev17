<?xml version="1.0" encoding="utf-8" ?>
<odoo>

    <record id="mig_tarifas_cliente_as" model="ir.actions.server">
        <field name="name">=> 1. Crear tarifas por cadena</field>
        <field name="model_id" ref="custom_inplast.model_mig_lineastarifa"/>
        <field name="binding_model_id" ref="custom_inplast.model_mig_lineastarifa"/>
        <field name="evaluation_type">value</field>
        <field name="state">code</field>
        <field name="code">
# Importar tarifa para los clientes y direcciones de entrega que la tienen:
partners = []
for li in records:

    # Cliente con referencia de la línea (si tiene delegaciones sólo encuentra la empresa principal):
    partnerfactura = env['res.partner'].search([('ref','=',li.clientecod)])
    if not partnerfactura.id: raise UserError("No encuentro " + str(li.clientecod))

    # Aquí busca la dirección de entrega de la empresa anterior:
    partner = env['res.partner'].search([('name','=',li.name),('parent_id','=',partnerfactura.id)])
    if not partner.id: partner = partnerfactura

    refpricelist = str(li.clientecod) + "." + str(li.name)
    pricelist = env['product.pricelist'].search([('mig_codigocliente','=',refpricelist)])
    if (partner.id) and (partner.id not in partners):
        if not pricelist.id:
            impuestoalplastico = True
            if partner.country_id.code != 'ES': impuestoalplastico = False
            if partner.country_id.code == 'ES' and partner.state_id.code in ['TF','GC']: impuestoalplastico = False
            pricelist = env['product.pricelist'].create({
                'name': partner.name,
                'mig_codigocliente': refpricelist,
                'pnt_next_update': li.fechavalideztarifa,
                'pnt_last_update': li.fechaactualizacion,
                'pnt_lock_date': li.fechalimitepedido,
                'pnt_ethylene_price': li.precioetileno,
                'pnt_plastic_tax': impuestoalplastico,
            })

    partners.append(partner.id)

    li['pricelist_id'] = pricelist.id

    if (partner.property_product_pricelist.mig_codigocliente != li.clientecod):
        partner.write({'property_product_pricelist': pricelist.id})
        </field>
    </record>

    <record id="mig_materia_prima_en_as" model="ir.actions.server">
        <field name="name">=> 2. Crear materia prima en la lista de materiales de los productos básicos (%)</field>
        <field name="model_id" ref="custom_inplast.model_mig_materialesarticulo"/>
        <field name="binding_model_id" ref="custom_inplast.model_mig_materialesarticulo"/>
        <field name="evaluation_type">value</field>
        <field name="state">code</field>
        <field name="code">

# MATERIALES: Son las materias primas por porcentaje del tapón o partes (mig.materialesarticulo).
# COMPONENTES: Es la cuchilla o las partes del tapón, hay tres casos: 1 línea => Cuchilla; 1 línea => Tapón; 2 líneas => "base y tapón" (mig.componentes).
# EMBALAJES: Productos para crear el BOM de las BOM de CAJAS y PALETS.
# SI EL TIPO DE PRODUCTO ES 3 EN COMPONENTES, ESTO INDICA LA CUCHILLA DE CORTE, Y HAY PRODUCTOS QUE SÓLO TIENEN ESTA LÍNEA.
# EN EL NUEVO SISTEMA, LAS CUCHILLAS NO SON PRODUCTOS SINO EQUIPOS PARA MANTENER. Se comprarían con la misma referencia y crearían en mantenimiento.

# En algún momento hay que poner el peso del campo de migración en el producto, se hace aquí:
products = env['product.template'].search([('detailed_type','!=','service')])
for p in products:
    if p.weight != p.mig_peso_neto_gr/1000:
        p['weight'] = p.mig_peso_neto_gr/1000

semis = []
# (se ejecutaba cuando se ejecuta desde partner) materialesarticulo = env['mig.materialesarticulo'].search([])
uompeso = env.ref('uom.product_uom_categ_kgm')
uomgramo = env.ref('uom.product_uom_gram')
# La del kg es igual pero con kgm

for li in records:
    if (li.name not in semis):
        semis.append(li.name)
for semi in semis:
    producto = env['product.product'].search([('default_code','=',semi)])
    materiales = env['mig.materialesarticulo'].search([('name','=',semi),('bom_line_id','=',False)])
    bom = env['mrp.bom'].search([('code','=',semi)])
    if not bom.id:
        bom = env['mrp.bom'].create({
            'product_id':producto.id,
            'product_tmpl_id':producto.product_tmpl_id.id,
            'type':'normal',
            'code':semi,
            'pnt_raw_type_id':uompeso.id})
    for mat in materiales:
        material = env['product.product'].search([('default_code','=',mat.componente)])
        pesoproducto = producto.mig_peso_neto_gr
        newbomline = env['mrp.bom.line'].create({
            'bom_id':bom.id,
            'product_id':material.id,
            'pnt_raw_percent': mat.cantidad,
            'product_qty':mat.cantidad * pesoproducto / 100,
            'product_uom_id':uomgramo.id})
        mat['bom_line_id'] = newbomline.id

        </field>
    </record>

    <record id="mig_componentes_as" model="ir.actions.server">
        <field name="name">=> 3. Crear componentes en productos finales (uds) para tapones con 2 piezas</field>
        <field name="model_id" ref="custom_inplast.model_mig_componentes"/>
        <field name="binding_model_id" ref="custom_inplast.model_mig_componentes"/>
        <field name="evaluation_type">value</field>
        <field name="state">code</field>
        <field name="code">

# MATERIALES: Son las materias primas por porcentaje del tapón o partes (mig.materialesarticulo).
# COMPONENTES: Es la cuchilla o las partes del tapón, hay tres casos: 1 línea => Cuchilla; 1 línea => Tapón; 2 líneas => "base y tapón" (mig.componentes).
# EMBALAJES: Productos para crear el BOM de las BOM de CAJAS y PALETS.
# SI EL TIPO DE PRODUCTO ES 3 EN COMPONENTES, ESTO INDICA LA CUCHILLA DE CORTE, Y HAY PRODUCTOS QUE SÓLO TIENEN ESTA LÍNEA.
# EN EL NUEVO SISTEMA, LAS CUCHILLAS NO SON PRODUCTOS SINO EQUIPOS PARA MANTENER. Se comprarían con la misma referencia y crearían en mantenimiento.

# LAS LÍNEAS QUE NO EJECUTA SON QUE ESTÁN MARCADAS COMO "TIPO 3" PERO NO LO SON !!!

finales = []
uompeso = env.ref('uom.product_uom_categ_kgm')

for li in records:
    if li.name not in finales: finales.append(li.name)
for final in finales:
    producto = env['product.product'].search([('default_code','=',final)])
    if not producto.id: raise UserError("No encuentro el producto " + str(final))

    componentes = env['mig.componentes'].search([('name','=',final),('bom_line_id','=',False)])
    bom = env['mrp.bom'].search([('code','=',final)])
    if not bom.id:
        bom = env['mrp.bom'].create({
            'product_id':producto.id,
            'product_tmpl_id':producto.product_tmpl_id.id,
            'type':'normal',
            'code':final,
            'pnt_raw_type_id':uompeso.id})

    for mat in componentes:
        material = env['product.product'].search([('default_code','=',mat.componente)])
        if not material.id: raise UserError("No encuentro el material " + str(material))

        # filtro para quitar los componentes duplicados de peso, que ya están en los semi y quitar las herramientas:
        # Caso de ser un componente del tapón:
        if (material.mig_tipo_producto != 3) and (material.uom_id.category_id.id != uompeso.id):
            newbomline = env['mrp.bom.line'].create({
                'bom_id':bom.id,
                'product_id':material.id,
                'product_qty':mat.cantidad,
            })
            if material.pnt_parent_id.id != producto.id:
                material['pnt_parent_id'] = producto.id
            mat['bom_line_id'] = newbomline.id

        # Caso de ser una herramienta o cuchilla:
        if (material.mig_tipo_producto == 3) and not (producto.pnt_tool_id.id):
            herramienta = env['maintenance.equipment'].search([('serial_no','=', material.default_code)])
            if not herramienta.id:
                herramienta = env['maintenance.equipment'].create({'name': material.name, 'serial_no':material.default_code})
            producto['pnt_tool_id'] = herramienta.id
            # Truco para quitar las herramientas de la lista de líneas pendientes:
            cualquiera = env['mrp.bom.line'].search([])[0]
            mat['bom_line_id'] = cualquiera.id

        </field>
    </record>

    <record id="mig_corregir_ncajas_embalajes_cajasypalets_as" model="ir.actions.server">
        <field name="name">=> 1. Corregir nº cajas en PT (mig.embalaje)</field>
        <field name="model_id" ref="custom_inplast.model_mig_embalaje"/>
        <field name="binding_model_id" ref="custom_inplast.model_mig_embalaje"/>
        <field name="evaluation_type">value</field>
        <field name="state">code</field>
        <field name="code">
for r in records:
    # COMPLETAR LA CANTIDAD DE TAPONES POR CAJA, SI NO ESTÁ ESTABLECIDO EN PT:
    if r.escaja == True:
        productobase = env['product.template'].search([('default_code','=',r.producto)])
        if (productobase.mig_unidades_palet != 0) and (productobase.mig_unidades_caja != productobase.mig_unidades_palet / r.cantidad):
            productobase['mig_unidades_caja'] = productobase.mig_unidades_palet / r.cantidad
            r['cajapaletnull'] = False

        </field>
    </record>

    <record id="mig_embalajes_cajasypalets_as" model="ir.actions.server">
        <field name="name">=> 4. Embalajes, Cajas y palets (mig.embalaje)</field>
        <field name="model_id" ref="custom_inplast.model_mig_embalaje"/>
        <field name="binding_model_id" ref="custom_inplast.model_mig_embalaje"/>
        <field name="evaluation_type">value</field>
        <field name="state">code</field>
        <field name="code">

for r in records:
    if not r.bom_line_id.id:
        productobase = env['product.template'].search([('default_code','=',r.producto)])
        pp_base = env['product.product'].search([('product_tmpl_id','=',productobase.id)])[0]
        if not pp_base.id: raise UserError("No encuentro el producto.producto base " + str(r.producto))

        taponesporcaja = productobase.mig_unidades_caja
        taponesporpalet = productobase.mig_ud_palet

        # Si no tiene configurados el nº de tapones por caja o palet, salta a la siguiente línea:
        if (taponesporcaja == 0) or (taponesporpalet == 0):
            r['cajapaletnull'] = True
            continue
        else:
            numerocajas = taponesporpalet / taponesporcaja

        # Códigos establecidos para los productos PACKING que vamos a crear:
        codecaja = 'C.'+ r.producto
        codepalet = 'P.' + r.producto
        # Códigos de paquete para caja y palet (automatización):
        packagetypecaja = env.ref('product_inplast.package_type_box_inplast')
        packagetypepalet = env.ref('product_inplast.package_type_pallet_inplast')



        # Hay que crear las cajas y palets primero, para después asignar las líneas ya que se hace por lotes.
        # De otra forma no funcionará ya que puede llegar una línea de palet antes que la caja esté creada.

        # CREACIÓN DE CAJA (si tiene asignados el nº de tapones que contiene):
        productcaja = env['product.template'].search([('default_code','=',codecaja)])
        if productcaja.id:
            pp_caja = env['product.product'].search([('product_tmpl_id','=', productcaja.id)])[0]

        # Creación de artículo CAJA, si no lo hemos encontrado::
        if (not productcaja.id) and (taponesporcaja != 0):
            # Crear producto CAJA:
            type = " - Caja "
            dye = ""
            if productobase.pnt_product_dye: dye = " " + productobase.pnt_product_dye
            name = productobase.name + dye + type + str(taponesporcaja)
            routemrp = env.ref('mrp.route_warehouse0_manufacture')

            productcaja = env['product.template'].create({
                'name': name,
                'pnt_product_type': 'packing',
                'pnt_parent_id': productobase.id,
                'pnt_parent_qty': taponesporcaja,
                'detailed_type': 'product',
                'list_price': productobase.list_price * taponesporcaja,
                'pnt_plastic_weight': productobase.pnt_plastic_weight * taponesporcaja,
                'standard_price': productobase.standard_price * taponesporcaja,
                'sale_ok': True,
                'purchase_ok': False,
                'default_code':codecaja,
                'route_ids': [(6, 0, [routemrp.id])]
            })

            # Asignar packaging_ids (product.packaging) al nuevo producto del tipo CAJA para huecos disponibles:
            pp_caja = env['product.product'].search([('product_tmpl_id','=', productcaja.id)])[0]
            newpackingcajatype = env['product.packaging'].create({
                'name': "Caja " + str(taponesporcaja),
                'package_type_id': packagetypecaja.id,
                'product_id': pp_caja.id,
                'product_uom_id': pp_caja.uom_id.id,
                'sales': False,
                'qty': 1,
            })
            #  Asignar packaging_ids (product.packaging) al producto BASE del tipo CAJA para cálculo de presupestos:
            newpackingcajatype = env['product.packaging'].create({
                'name': "Caja " + str(taponesporcaja),
                'package_type_id': packagetypecaja.id,
                'product_id': pp_base.id,
                'product_uom_id': pp_base.uom_id.id,
                'sales': True,
                'qty': taponesporcaja,
            })

        # CREACIÓN DEL PALET (si existe la CAJA y si tiene asignados el nº de tapones que contiene el total del palet):
        productpalet = env['product.template'].search([('default_code','=',codepalet)])
        if (not productpalet.id) and (taponesporcaja > 0) and (taponesporpalet > 0):
            # Crear producto PALET:
            type = " - Palet "
            dye = ""
            if productobase.pnt_product_dye: dye = " " + productobase.pnt_product_dye
            name = productobase.name + dye + type + str(taponesporpalet)
            routemrp = env.ref('mrp.route_warehouse0_manufacture')
            productpalet = env['product.template'].create({
                'name': name,
                'pnt_product_type': 'packing',
                'pnt_parent_id': productobase.id,
                'pnt_parent_qty': taponesporpalet,
                'detailed_type': 'product',
                'list_price': productobase.list_price * taponesporpalet,
                'pnt_plastic_weight': productobase.pnt_plastic_weight * taponesporpalet,
                'standard_price': productobase.standard_price * taponesporpalet,
                'sale_ok': True,
                'purchase_ok': False,
                'default_code':codepalet,
                'route_ids': [(6, 0, [routemrp.id])]
            })

            # Asignar packaging_ids (product.packaging) al nuevo producto del tipo PALET para huecos disponibles:
            pp_palet = env['product.product'].search([('product_tmpl_id','=', productpalet.id)])[0]
            newpackingcajatype = env['product.packaging'].create({
                'name': "Palet " + str(taponesporpalet),
                'package_type_id': packagetypepalet.id,
                'product_id': pp_palet.id,
                'product_uom_id': pp_palet.uom_id.id,
                'sales': False,
                'qty': 1,
            })
            #  Asignar packaging_ids (product.packaging) al producto BASE del tipo PALET para cálculo de presupestos:
            newpackingcajatype = env['product.packaging'].create({
                'name': "Palet " + str(taponesporpalet),
                'package_type_id': packagetypepalet.id,
                'product_id': pp_base.id,
                'product_uom_id': pp_base.uom_id.id,
                'sales': True,
                'qty': taponesporpalet,
            })



        # CREAICÓN Y ACTUALIZACIÓN DE LÍNEAS DE MATERIALES para el registro en curso:
        if (r.cajapalet == "Caja") and (taponesporcaja > 0):
            # Comprobación si el producto CAJA ya tiene lista de materiales:
            bomcaja = env['mrp.bom'].search([('code','=',codecaja), ('product_tmpl_id','=',productcaja.id)])
            if not bomcaja.id:
                # Crear lista de materiales para CAJA:
                bomcaja = env['mrp.bom'].create({
                    'code': codecaja,
                    'product_tmpl_id': productcaja.id,
                    'type': 'normal',
                })
                # Crear componente de la lista de materiales de la CAJA, para los tapones:
                newbomline  = env['mrp.bom.line'].create(
                        {'product_id': pp_base.id, 'product_qty': taponesporcaja, 'bom_id': bomcaja.id })


            # Crear componente de la lista de materiales de la CAJA, para el registro que estamos trabajando:
            productocomponente = env['product.product'].search([('default_code','=', r.name)])
            newbomline  = env['mrp.bom.line'].create(
                    {'product_id': productocomponente.id, 'product_qty': r.cantidad, 'bom_id': bomcaja.id })
            # Marcar la línea como migrada asignado el nuevo registro creado:
            r['bom_line_id'] = newbomline.id



        # Ahora el caso de que la línea corresponda a un componente de PALET:
        elif (r.cajapalet == "Palet") and (taponesporcaja > 0) and (taponesporpalet > 0):
            # Comprobación si el producto PALET ya tiene lista de materiales:
            bompalet = env['mrp.bom'].search([('code','=',codepalet), ('product_tmpl_id','=',productpalet.id)])
            if not bompalet.id:
                # Crear lista de materiales para PALLET:
                bompalet = env['mrp.bom'].create({
                    'code': codepalet,
                    'product_tmpl_id': productpalet.id,
                    'type': 'normal',
                })
                # Crear componentes de la lista de materiales de la PALET, para LAS CAJAS:
                newbomline  = env['mrp.bom.line'].create(
                        {'product_id': pp_caja.id, 'product_qty': numerocajas, 'bom_id': bompalet.id })


            # Crear componente de la lista de materiales de la CAJA, para el registro que estamos trabajando:
            productocomponente = env['product.product'].search([('default_code','=', r.name)])
            newbomline  = env['mrp.bom.line'].create(
                    {'product_id': productocomponente.id, 'product_qty': r.cantidad, 'bom_id': bompalet.id })
            # Marcar la línea como migrada asignado el nuevo registro creado:
            r['bom_line_id'] = newbomline.id

        else: continue

        </field>
    </record>


    <record id="mig_lineas_de_tarifa_as" model="ir.actions.server">
        <field name="name">=> 5. Líneas de tarifa</field>
        <field name="model_id" ref="custom_inplast.model_mig_lineastarifa"/>
        <field name="binding_model_id" ref="custom_inplast.model_mig_lineastarifa"/>
        <field name="evaluation_type">value</field>
        <field name="state">code</field>
        <field name="code">

# Migrar líneas de tarifas:
for li in records:
    partnerfactura = env['res.partner'].search([('ref','=',li.clientecod)])
    if not partnerfactura: raise UserError("No encuentro cliente ref: " + li.clientecod)
    partner = env['res.partner'].search([('name','=',li.name),('parent_id','=',partnerfactura.id)])
    if not partner.id: partner = partnerfactura

    tarifa = partner.property_product_pricelist
    if (not tarifa.id) or (tarifa.id == 1): raise UserError("Revisa tarifa para: " + li.clientecod + " " + li.name)

    producto = env['product.template'].search([('default_code','=',li.articulo)])
    if not producto.id: continue

    pricelistitem = env['product.pricelist.item'].create({
        'pricelist_id': tarifa.id,
        'product_tmpl_id': producto.id,
        'applied_on': '1_product',
        'compute_price': 'fixed',
        'price_surcharge': producto.pnt_plastic_1000unit_tax / 1000,
        'fixed_price': float(li.preciooferta) - producto.pnt_plastic_1000unit_tax / 1000
    })

        </field>
    </record>

</odoo>
